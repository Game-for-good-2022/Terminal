// The function name
#pragma kernel Density

#include "/Includes/Density.compute"
#include "/Includes/Noise.compute"



// Noise settings
StructuredBuffer<float3> offsets;
RWStructuredBuffer<float> manualData;

int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float weightMultiplier;
bool closeEdges;
float hardFloor;
float hardFloorWeight;
float planetRadius;
float4 params;
float isoLevel;


[numthreads(numThreads,numThreads,numThreads)]
void Density (int3 id : SV_DispatchThreadID)
{
    int index = indexFromCoord(id.x,id.y,id.z);
    
    // Out of bound
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }
    
    // World pos for points
    float3 pos = centre + id * spacing - boundsSize/2;
    float offsetNoise = 0;

    float noise = 0;

    float frequency = noiseScale/100;
    float amplitude = 1;
    float weight = 1;
    for (int j =0; j < octaves; j ++) {
        float n = snoise((pos+offsetNoise) * frequency + offsets[j] + offset);
        float v = 1-abs(n);
        v = v*v;
        v *= weight;
        weight = max(min(v*weightMultiplier,1),0);
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    float r = length(pos);
    // The higher the position is, the less likely it is gonna appear.
    float finalVal = planetRadius - r + noise * noiseWeight + (r%params.x) * params.y;

    if (pos.y < hardFloor) {
        finalVal += hardFloorWeight;
    }

    if (closeEdges) {
        float3 edgeOffset = abs(pos*2)-worldSize + spacing/2;
        float edgeWeight = saturate(sign(max(max(edgeOffset.x,edgeOffset.y),edgeOffset.z)));
        finalVal = finalVal * (1-edgeWeight) - 100 * edgeWeight;
        
    }

    // float3 vecToHit = hitPoint - pos;
    // float SqrDst = vecToHit.x * vecToHit.x + vecToHit.y * vecToHit.y + vecToHit.z * vecToHit.z;
    // if(SqrDst <= (range * range)){
    //     finalVal = -100;
    // }
    finalVal = clamp(finalVal, isoLevel - 10, isoLevel + 10);

    // This index list can be used in marchingcubes.compute
    points[index] = float4(pos, finalVal + manualData[index]);
}
