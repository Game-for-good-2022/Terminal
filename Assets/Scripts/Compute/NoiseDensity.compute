// The function name
#pragma kernel Density
#include "Assets/Scripts/Compute/Includes/Noise.compute"
// #include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise3D.hlsl"

static const int numThreads = 8;

// Noise settings
StructuredBuffer<float3> offsets;
RWStructuredBuffer<float> manualData;
RWStructuredBuffer<int> pointsStatus;

int octaves;
float lacunarity, persistence, noiseScale, noiseWeight, floorOffset, 
heightGredient, multiFractalWeight;

bool closeEdges;
bool b1, b2;
float f1, f2, f3;

float4 params;
float isoLevel;

RWStructuredBuffer<float4> points;
int numPointsPerAxis;
float boundsSize;
float3 centre;
float3 offset;
float spacing;
float3 worldSize;

int indexFromCoord(uint x, uint y, uint z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

[numthreads(numThreads,numThreads,numThreads)]
void Density (int3 id : SV_DispatchThreadID)
{
    int index = indexFromCoord(id.x,id.y,id.z);
    
    // Out of bound
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }
    
    // World pos
    float3 pos = centre + id * spacing - boundsSize/2;

    float offsetNoise = 0;
    
    float noise = 0;

    float frequency = noiseScale/100;
    float amplitude = 1;
    float weight = 1;
    for (int j = 0; j < octaves; j++) {
        // -1 -> 1
        float n = snoise((pos+offsetNoise) * frequency + offsets[j]);

        n = abs(n);
        n = - n + 1;
        
        if(j >= 1){
            n *= noise * multiFractalWeight;
        }
        noise += n * amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }

    // The higher the position is, the less likely it is gonna appear.
    float finalVal = -pos.y * heightGredient + floorOffset + noise * noiseWeight;

    if (closeEdges) {
        float3 edgeOffset = abs(pos*2)-worldSize + spacing/2;
        float edgeWeight = saturate(sign(max(max(edgeOffset.x,edgeOffset.y),edgeOffset.z)));
        finalVal = finalVal * (1-edgeWeight) - 100 * edgeWeight;
        
    }

    finalVal = clamp(finalVal, isoLevel - 10, isoLevel + 10);
    
    if(finalVal + manualData[index] - isoLevel > 0)
    pointsStatus[0] = 1;
    if(finalVal + manualData[index] - isoLevel < 0)
    pointsStatus[1] = 1;
    // This index list can be used in marchingcubes.compute
    points[index] = float4(pos, finalVal + manualData[index]);
}
