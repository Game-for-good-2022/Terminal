// The function name
#pragma kernel Density
#include "Assets/Scripts/Compute/Includes/Noise.compute"

static const int numThreads = 8;

struct GroundLevelData
{
    float twodeeHeight;
    bool isDirt;
};

// Noise settings
StructuredBuffer<float3> offsets;
RWStructuredBuffer<float> manualData;
RWStructuredBuffer<GroundLevelData> GroundLevelDataBuffer;
RWStructuredBuffer<int> pointsStatus;

int octaves;
float radius;
float lacunarity, persistence, noiseScale, noiseWeight, floorOffset, 
heightGredient, multiFractalWeight;

bool b1, b2;
float f1, f2, f3;

float4 params;
float isoLevel;

RWStructuredBuffer<float4> points;
int numPointsPerAxis;
float boundsSize;
float3 centre;
float3 worldSize;
float3 offset;
float spacing;
bool closeEdges;

int indexFromCoord(uint x, uint y, uint z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

float customDistance(float3 pos, float r){
    // return radius - distance(float2(0,0), float2(pos.x, pos.y));
    return -pos.y;
}

[numthreads(numThreads,numThreads,numThreads)]
void Density (int3 id : SV_DispatchThreadID)
{
    // Out of bound
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }

    int index = indexFromCoord(id.x,id.y,id.z);
    
    // World pos
    float3 pos = centre + id * spacing - boundsSize/2;

    float noise = 0;

    float frequency = noiseScale * 0.01f;
    float amplitude = 1;
    float weight = 1;

    for (int j = 0; j < octaves; j++) {
        // -1 -> 1
        float3 noiseSamplePoint = pos * frequency + offsets[j];
        noiseSamplePoint.y = 0.0f;
        float n = snoise(noiseSamplePoint);

        n = abs(n);
        n = - n + 1;
        
        if(j >= 1){
            n *= noise * multiFractalWeight;
        }
        noise += n * amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }
    noise *= noiseWeight;

    // The higher the position is, the less likely it is gonna appear.
    // float finalVal = (radius - distance(float3(0,0,0), pos)) * heightGredient + floorOffset + noise;
    float finalVal = -pos.y * heightGredient + floorOffset + noise;

    // -pos.y * heightGredient + floorOffset + noise + manualData[index] = 0
    float heightOnThisPos = (floorOffset + noise + manualData[index]) / heightGredient;
    float heightOnThisPosWithoutManual = (noise + floorOffset) / heightGredient;
    
    // A bad method
    // if(id.y == 0){
        //     // 3D -> 2D buffer
        //     GroundLevelDataBuffer[id.x + id.z * numPointsPerAxis].twodeeHeight = 
        //     heightOnThisPos;
    // }

    if (closeEdges) {
        float3 edgeOffset = abs(pos*2)-worldSize + spacing/2;
        float edgeWeight = saturate(sign(max(max(edgeOffset.x,edgeOffset.y),edgeOffset.z)));
        finalVal = finalVal * (1-edgeWeight) - 100 * edgeWeight;
    }

    if(finalVal + manualData[index] > 0){
        pointsStatus[0] = 1;
        GroundLevelDataBuffer[index].isDirt = true;
        }else{
        pointsStatus[1] = 1;
        GroundLevelDataBuffer[index].isDirt = false;
    }
    
    // This index list can be used in marchingcubes.compute
    points[index] = float4(pos, finalVal + manualData[index]);
}
