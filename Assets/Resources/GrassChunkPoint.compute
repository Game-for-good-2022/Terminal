#include "Assets/Resources/Random.cginc"
#define FLT_MAX 1e+10
#define FLT_MIN -1e+10
#define FLT_MIN_POS 1e-10

struct GrassData {
    float4 position;
    bool enable;
};

struct GroundLevelData
{
    float weight;
    float twoDimentionalHeight;
    bool hasMeshAtThisPlace;
};

RWStructuredBuffer<GroundLevelData> GroundLevelDataBuffer;
RWStructuredBuffer<GroundLevelData> GroundLevelDataBufferBelow;
RWStructuredBuffer<GrassData> GrassPositionsBuffer;

int _Dimension, numGrassesPerAxis, numPointsPerAxis;
float chunkBoundSize;
float3 centre;
float grassSpacing;
float meshSpacing;
float4 requiredColor;
bool hasChunkBelow;
float ratio;
float worldPosOffset;
float textureSize;

float _DisplacementStrength;
RWTexture3D<float4> universalRenderTex;

int indexFromCoord(uint x, uint y, uint z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

// return: 0 - false, 1 - true
int colorCmp(float4 col1, float4 col2){
    float threhold = 0.01f;
    return 1 - step(threhold, distance(col1.rgb, col2.rgb));
}

// k0: Calculate vertical position of every 2d mesh point from GroundLevelData buffer
#pragma kernel CalculateGrassPos 
[numthreads(8,8,8)]
void CalculateGrassPos(int3 id : SV_DispatchThreadID) {
    if(id.y <= 0) return;

    int index = indexFromCoord(id.x, id.y, id.z);
    int below_index = indexFromCoord(id.x, id.y - 1, id.z);

    if(GroundLevelDataBuffer[index].weight < 0 && GroundLevelDataBuffer[below_index].weight > 0){
        float weight1 = -GroundLevelDataBuffer[index].weight;
        float weight2 =  GroundLevelDataBuffer[below_index].weight;
        float weightSum = weight1 + weight2;

        float posY1 = centre.y + id.y * meshSpacing - chunkBoundSize / 2;
        float posY2 = centre.y + (id.y - 1) * meshSpacing - chunkBoundSize / 2;
        float posY = posY1 * (weight2 / weightSum) + posY2 * (weight1 / weightSum);

        GroundLevelDataBuffer[id.x + id.z * numPointsPerAxis].twoDimentionalHeight = posY;
        return;
    }
}

// k1: Calculate exact position of every grass from GroundLevelData (By interpolation)
#pragma kernel InitializeGrassChunk 
[numthreads(8,8,1)]
void InitializeGrassChunk(int2 id : SV_DispatchThreadID) {
    if (id.x >= numGrassesPerAxis || id.y >= numGrassesPerAxis) return;
    GrassData grass;
    grass.enable = false;
    grass.position = float4(0, 0, 0, 0);
    GrassPositionsBuffer[id.x + id.y * numGrassesPerAxis] = grass;
    
    float2 idFloat = id;
    idFloat += FLT_MIN_POS;

    float groundLevel1, groundLevel2, groundLevel3, groundLevel4;
    float heightMapStep, grassMapStep;
    heightMapStep = 1.0f / float(numPointsPerAxis - 1); // TODO: move divition to script
    grassMapStep = 1.0f / float(numGrassesPerAxis);

    int2 meshCoordRef = 0;
    // TOPLEFT
    meshCoordRef.x = floor(idFloat.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    meshCoordRef.y = floor(idFloat.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    groundLevel1 = GroundLevelDataBuffer[meshCoordRef.x + meshCoordRef.y * numPointsPerAxis].twoDimentionalHeight;

    // TOPRIGHT
    meshCoordRef.x = ceil (idFloat.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    meshCoordRef.y = floor(idFloat.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    groundLevel2 = GroundLevelDataBuffer[meshCoordRef.x + meshCoordRef.y * numPointsPerAxis].twoDimentionalHeight;

    // BOTTOMLEFT
    meshCoordRef.x = floor(idFloat.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    meshCoordRef.y = ceil (idFloat.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    groundLevel3 = GroundLevelDataBuffer[meshCoordRef.x + meshCoordRef.y * numPointsPerAxis].twoDimentionalHeight;

    // BOTTOMRIGHT
    meshCoordRef.x = ceil (idFloat.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    meshCoordRef.y = ceil (idFloat.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    groundLevel4 = GroundLevelDataBuffer[meshCoordRef.x + meshCoordRef.y * numPointsPerAxis].twoDimentionalHeight;

    float max12 = max(groundLevel1, groundLevel2);
    float max34 = max(groundLevel3, groundLevel4);
    float max1234 = max(max12, max34);
    if(max1234 == FLT_MIN) return;

    float min12 = min(groundLevel1, groundLevel2);
    float min34 = min(groundLevel3, groundLevel4);
    float min1234 = min(min12, min34);
    
    float grassDisappearStart = meshSpacing * 0.8f;
    float grassDisappearEnd = meshSpacing * 1.6f;
    
    float4 pos = 0.0f;
    pos.x = centre.x - chunkBoundSize * 0.5f + idFloat.x * grassSpacing;
    pos.z = centre.z - chunkBoundSize * 0.5f + idFloat.y * grassSpacing;

    float height;
    if(min1234 == FLT_MIN){
        int meshIdY = floor((max1234 + chunkBoundSize / 2 - centre.y) / meshSpacing);
        if(meshIdY > float(numPointsPerAxis) / 2) return;
        if(!hasChunkBelow) return;

        // TOPLEFT
        meshCoordRef.x = floor(idFloat.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
        meshCoordRef.y = floor(idFloat.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
        float groundLevel1b = GroundLevelDataBufferBelow[meshCoordRef.x + meshCoordRef.y * numPointsPerAxis].twoDimentionalHeight;

        // TOPRIGHT
        meshCoordRef.x = ceil (idFloat.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
        meshCoordRef.y = floor(idFloat.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
        float  groundLevel2b = GroundLevelDataBufferBelow[meshCoordRef.x + meshCoordRef.y * numPointsPerAxis].twoDimentionalHeight;

        // BOTTOMLEFT
        meshCoordRef.x = floor(idFloat.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
        meshCoordRef.y = ceil (idFloat.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
        float groundLevel3b = GroundLevelDataBufferBelow[meshCoordRef.x + meshCoordRef.y * numPointsPerAxis].twoDimentionalHeight;

        // BOTTOMRIGHT
        meshCoordRef.x = ceil (idFloat.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
        meshCoordRef.y = ceil (idFloat.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
        float groundLevel4b = GroundLevelDataBufferBelow[meshCoordRef.x + meshCoordRef.y * numPointsPerAxis].twoDimentionalHeight;

        float max11b = max(groundLevel1, groundLevel1b);
        if(max11b == FLT_MIN) return;
        float max22b = max(groundLevel2, groundLevel2b);
        if(max22b == FLT_MIN) return;
        float max33b = max(groundLevel3, groundLevel3b);
        if(max33b == FLT_MIN) return;
        float max44b = max(groundLevel4, groundLevel4b);
        if(max44b == FLT_MIN) return;

        float max11b22b = max(max11b, max22b);
        float max33b44b = max(max33b, max44b);
        float max11b22b33b44b = max(max11b22b, max33b44b);
        
        float min11b22b = min(max11b, max22b);
        float min33b44b = min(max33b, max44b);
        float min11b22b33b44b = min(min11b22b, min33b44b);

        // Restrict 'k'
        float k = max11b22b33b44b - min11b22b33b44b;

        if(k > grassDisappearEnd) return;
        if(k > grassDisappearStart){
            float grassIsHere = randValue(abs(pos.x) * 83749 + abs(pos.z) * 4723);
            if(grassIsHere < ((k - grassDisappearStart) / (grassDisappearEnd - grassDisappearStart))) return;
        }
        
        float2 interpolation = 0.0f;
        interpolation.x = ((idFloat.x * grassMapStep) % heightMapStep) / heightMapStep;
        interpolation.y = ((idFloat.y * grassMapStep) % heightMapStep) / heightMapStep;

        float h1 = lerp(max11b, max22b, interpolation.x);
        float h2 = lerp(max33b, max44b, interpolation.x);
        height = lerp(h1, h2, interpolation.y);
    }
    else{
        // Restrict 'k'
        float k = max1234 - min1234;
        
        if(k > grassDisappearEnd) return;
        if(k > grassDisappearStart){
            float grassIsHere = randValue(abs(pos.x) * 83749 + abs(pos.z) * 4723);
            if(grassIsHere < ((k - grassDisappearStart) / (grassDisappearEnd - grassDisappearStart))) return;
        }

        float2 interpolation = 0.0f;
        interpolation.x = ((idFloat.x * grassMapStep) % heightMapStep) / heightMapStep;
        interpolation.y = ((idFloat.y * grassMapStep) % heightMapStep) / heightMapStep;

        float h1 = lerp(groundLevel1, groundLevel2, interpolation.x);
        float h2 = lerp(groundLevel3, groundLevel4, interpolation.x);
        height = lerp(h1, h2, interpolation.y);
    }
    

    
    pos.y = height;
    pos.w = 0.0f;       // Out of order

    // Offset slightly
    pos.x += lerp(-1.0f, 1.0f, randValue(abs(pos.x) * 45623 + abs(pos.z) * 3461)) * grassSpacing * 0.5f;
    pos.z += lerp(-1.0f, 1.0f, randValue(abs(pos.x) * 73247 + abs(pos.z) * 1237)) * grassSpacing * 0.5f;
    
    float3 textureSamplePoint;
    textureSamplePoint.x = pos.x;
    textureSamplePoint.y = pos.y;
    textureSamplePoint.z = pos.z;
    textureSamplePoint += worldPosOffset;
    textureSamplePoint *= ratio * textureSize;

    // Kick grass without paint
    if(!colorCmp(requiredColor, universalRenderTex[textureSamplePoint])) return;

    grass.position = pos;
    grass.enable = true;

    GrassPositionsBuffer[id.x + id.y * numGrassesPerAxis] = grass;
}