#pragma kernel InitializeGrassChunk

#include "Assets/Scripts/Compute/Includes/Noise.compute"
#include "Assets/Resources/Random.cginc"

struct GrassData {
    float4 position;
};

struct GroundLevelData{
    float twodeeHeight;
};

RWStructuredBuffer<GrassData> _GrassDataBuffer;
RWStructuredBuffer<GroundLevelData> GroundLevelDataBuffer;

int _Dimension, numGrassesPerAxis, numPointsPerAxis;
float chunkBoundSize;
float3 centre;
float3 offset;
float spacing;

float _DisplacementStrength;

[numthreads(8,8,1)]
void InitializeGrassChunk(int3 id : SV_DispatchThreadID) {
    if (id.x >= numGrassesPerAxis || id.y >= numGrassesPerAxis) {
        return;
    }
    GrassData grass;
    float groundLevel1, groundLevel2, groundLevel3, groundLevel4;
    float heightMapStep, grassMapStep;
    heightMapStep = 1.0f / float(numPointsPerAxis - 1);
    grassMapStep = 1.0f / float(numGrassesPerAxis);

    int2 heightMapPointTemp = 0.0f;

    // TOPLEFT
    heightMapPointTemp.x = floor(id.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    heightMapPointTemp.y = floor(id.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    groundLevel1 = GroundLevelDataBuffer[heightMapPointTemp.x + heightMapPointTemp.y * numPointsPerAxis].twodeeHeight;
    // TOPRIGHT
    heightMapPointTemp.x = ceil (id.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    heightMapPointTemp.y = floor(id.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    groundLevel2 = GroundLevelDataBuffer[heightMapPointTemp.x + heightMapPointTemp.y * numPointsPerAxis].twodeeHeight;
    // BOTTOMLEFT
    heightMapPointTemp.x = floor(id.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    heightMapPointTemp.y = ceil (id.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    groundLevel3 = GroundLevelDataBuffer[heightMapPointTemp.x + heightMapPointTemp.y * numPointsPerAxis].twodeeHeight;
    // BOTTOMRIGHT
    heightMapPointTemp.x = ceil (id.x * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    heightMapPointTemp.y = ceil (id.y * float(numPointsPerAxis - 1) / float(numGrassesPerAxis));
    groundLevel4 = GroundLevelDataBuffer[heightMapPointTemp.x + heightMapPointTemp.y * numPointsPerAxis].twodeeHeight;
    
    float testHeight1 = GroundLevelDataBuffer[id.x + id.y * numPointsPerAxis].twodeeHeight;
    float testHeight2 = 0.0f;
    
    float2 interpolation = 0.0f;
    interpolation.x = ((id.x * grassMapStep) % heightMapStep) / heightMapStep;
    interpolation.y = ((id.y * grassMapStep) % heightMapStep) / heightMapStep;
    
    float h1 = lerp(groundLevel1, groundLevel2, interpolation.x);
    float h2 = lerp(groundLevel3, groundLevel4, interpolation.x);
    float height = lerp(h1, h2, interpolation.y);

    float4 pos = 0.0f;
    pos.w = 0.0f;       // Out of order
    pos.x = centre.x - chunkBoundSize * 0.5f + id.x * spacing;
    pos.z = centre.z - chunkBoundSize * 0.5f + id.y * spacing;
    pos.y = height + 2.5f;

    // Offset slightly
    pos.x += lerp(-1.0f, 1.0f, randValue(abs(pos.x) * 45623 + abs(pos.z) * 3461)) * spacing * 0.5f;
    pos.z += lerp(-1.0f, 1.0f, randValue(abs(pos.x) * 73247 + abs(pos.z) * 1237)) * spacing * 0.5f;
    
    grass.position = pos;

    _GrassDataBuffer[id.x + id.y * numGrassesPerAxis] = grass;
}